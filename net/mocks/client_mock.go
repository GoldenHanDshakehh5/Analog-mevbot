// Code generated by MockGen. DO NOT EDIT.
// Source: ssh/client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	ssh "github.com/whiteblock/genesis/ssh"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// MultiRun mocks base method
func (m *MockClient) MultiRun(commands ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range commands {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MultiRun", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiRun indicates an expected call of MultiRun
func (mr *MockClientMockRecorder) MultiRun(commands ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiRun", reflect.TypeOf((*MockClient)(nil).MultiRun), commands...)
}

// FastMultiRun mocks base method
func (m *MockClient) FastMultiRun(commands ...string) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range commands {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FastMultiRun", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FastMultiRun indicates an expected call of FastMultiRun
func (mr *MockClientMockRecorder) FastMultiRun(commands ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FastMultiRun", reflect.TypeOf((*MockClient)(nil).FastMultiRun), commands...)
}

// Run mocks base method
func (m *MockClient) Run(command string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", command)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run
func (mr *MockClientMockRecorder) Run(command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockClient)(nil).Run), command)
}

// KeepTryRun mocks base method
func (m *MockClient) KeepTryRun(command string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeepTryRun", command)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KeepTryRun indicates an expected call of KeepTryRun
func (mr *MockClientMockRecorder) KeepTryRun(command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeepTryRun", reflect.TypeOf((*MockClient)(nil).KeepTryRun), command)
}

// DockerExec mocks base method
func (m *MockClient) DockerExec(node ssh.Node, command string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DockerExec", node, command)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DockerExec indicates an expected call of DockerExec
func (mr *MockClientMockRecorder) DockerExec(node, command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DockerExec", reflect.TypeOf((*MockClient)(nil).DockerExec), node, command)
}

// DockerCp mocks base method
func (m *MockClient) DockerCp(node ssh.Node, source, dest string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DockerCp", node, source, dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// DockerCp indicates an expected call of DockerCp
func (mr *MockClientMockRecorder) DockerCp(node, source, dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DockerCp", reflect.TypeOf((*MockClient)(nil).DockerCp), node, source, dest)
}

// KeepTryDockerExec mocks base method
func (m *MockClient) KeepTryDockerExec(node ssh.Node, command string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeepTryDockerExec", node, command)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KeepTryDockerExec indicates an expected call of KeepTryDockerExec
func (mr *MockClientMockRecorder) KeepTryDockerExec(node, command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeepTryDockerExec", reflect.TypeOf((*MockClient)(nil).KeepTryDockerExec), node, command)
}

// KeepTryDockerExecAll mocks base method
func (m *MockClient) KeepTryDockerExecAll(node ssh.Node, commands ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{node}
	for _, a := range commands {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "KeepTryDockerExecAll", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KeepTryDockerExecAll indicates an expected call of KeepTryDockerExecAll
func (mr *MockClientMockRecorder) KeepTryDockerExecAll(node interface{}, commands ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{node}, commands...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeepTryDockerExecAll", reflect.TypeOf((*MockClient)(nil).KeepTryDockerExecAll), varargs...)
}

// DockerExecd mocks base method
func (m *MockClient) DockerExecd(node ssh.Node, command string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DockerExecd", node, command)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DockerExecd indicates an expected call of DockerExecd
func (mr *MockClientMockRecorder) DockerExecd(node, command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DockerExecd", reflect.TypeOf((*MockClient)(nil).DockerExecd), node, command)
}

// DockerExecdit mocks base method
func (m *MockClient) DockerExecdit(node ssh.Node, command string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DockerExecdit", node, command)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DockerExecdit indicates an expected call of DockerExecdit
func (mr *MockClientMockRecorder) DockerExecdit(node, command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DockerExecdit", reflect.TypeOf((*MockClient)(nil).DockerExecdit), node, command)
}

// DockerExecdLog mocks base method
func (m *MockClient) DockerExecdLog(node ssh.Node, command string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DockerExecdLog", node, command)
	ret0, _ := ret[0].(error)
	return ret0
}

// DockerExecdLog indicates an expected call of DockerExecdLog
func (mr *MockClientMockRecorder) DockerExecdLog(node, command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DockerExecdLog", reflect.TypeOf((*MockClient)(nil).DockerExecdLog), node, command)
}

// DockerExecdLogAppend mocks base method
func (m *MockClient) DockerExecdLogAppend(node ssh.Node, command string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DockerExecdLogAppend", node, command)
	ret0, _ := ret[0].(error)
	return ret0
}

// DockerExecdLogAppend indicates an expected call of DockerExecdLogAppend
func (mr *MockClientMockRecorder) DockerExecdLogAppend(node, command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DockerExecdLogAppend", reflect.TypeOf((*MockClient)(nil).DockerExecdLogAppend), node, command)
}

// DockerRead mocks base method
func (m *MockClient) DockerRead(node ssh.Node, file string, lines int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DockerRead", node, file, lines)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DockerRead indicates an expected call of DockerRead
func (mr *MockClientMockRecorder) DockerRead(node, file, lines interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DockerRead", reflect.TypeOf((*MockClient)(nil).DockerRead), node, file, lines)
}

// DockerMultiExec mocks base method
func (m *MockClient) DockerMultiExec(node ssh.Node, commands []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DockerMultiExec", node, commands)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DockerMultiExec indicates an expected call of DockerMultiExec
func (mr *MockClientMockRecorder) DockerMultiExec(node, commands interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DockerMultiExec", reflect.TypeOf((*MockClient)(nil).DockerMultiExec), node, commands)
}

// KTDockerMultiExec mocks base method
func (m *MockClient) KTDockerMultiExec(node ssh.Node, commands []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KTDockerMultiExec", node, commands)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KTDockerMultiExec indicates an expected call of KTDockerMultiExec
func (mr *MockClientMockRecorder) KTDockerMultiExec(node, commands interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KTDockerMultiExec", reflect.TypeOf((*MockClient)(nil).KTDockerMultiExec), node, commands)
}

// Scp mocks base method
func (m *MockClient) Scp(src, dest string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scp", src, dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scp indicates an expected call of Scp
func (mr *MockClientMockRecorder) Scp(src, dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scp", reflect.TypeOf((*MockClient)(nil).Scp), src, dest)
}

// Close mocks base method
func (m *MockClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}
