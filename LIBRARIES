#Adding Blockchain Libraries


##Integral Functions
Writing a blockchain library without these functions is nearly impossible. Before writing a library, ensure that you have a proper understanding
of what these functions do.

### buildState.SetBuildSteps

### buildState.IncrementBuildProgress

### buildState.SetBuildStage

### buildState.Write

### (this SshClient) MultiRun(commands ...string) ([]string, error)

### (this SshClient) FastMultiRun(commands ...string) (string, error)

### (this SshClient) Run(command string) (string, error)

### (this SshClient) KeepTryRun(command string) (string, error)

### (this SshClient) DockerExec(node int, command string) (string, error)

### (this SshClient) DockerCp(node int, source string, dest string) error

### (this SshClient) KeepTryDockerExec(node int, command string) (string, error)

### (this SshClient) DockerExecd(node int, command string) (string, error)

### (this SshClient) DockerExecdit(node int, command string) (string, error)

### (this SshClient) DockerExecdLog(node int, command string) error

### (this SshClient) DockerExecdLogAppend(node int, command string) error

### (this SshClient) DockerMultiExec(node int, commands []string) (string, error)

### (this SshClient) KTDockerMultiExec(node int, commands []string) (string, error) 

### (this SshClient) Scp(src string, dest string) error

##Helper Functions
These function calls make creating a blockchain library significantly easier
